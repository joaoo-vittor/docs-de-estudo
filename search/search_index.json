{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Lista de estudo O objetivo dessa pagina \u00e9 organizar todos os assuntos que j\u00e1 estudei e que ainda irei estudar. Topicos Ambiente de desenvolvimento com python Cria\u00e7\u00e3o Ativar ambiente virtual Instalar depend\u00eancia Salvar depend\u00eancias Instalar depend\u00eancias Desativar ambiente virtual Fila com Redis Teoria Producer Consumer Fila Exchange Ambiente de desenvolvimento Diretorio Ambiente de desenvolvimento Ativa\u00e7\u00e3o do ambiente virtual Instala\u00e7\u00e3o das depend\u00eancias Comand Requirements Containers Consumer Desenvolvendo um consumer Imports URL de conex\u00e3o Worker consumer Fun\u00e7\u00e3o para formatar dict Cria\u00e7\u00e3o de um plugin Instancia\u00e7\u00e3o do worker consumer Subir container Producer Desenvolvendo um producer Imports URL de conex\u00e3o Conex\u00e3o Declara\u00e7\u00e3o da Exchange e da Queue Fun\u00e7\u00e3o de publish Publicando uma mensagem","title":"Home"},{"location":"#lista-de-estudo","text":"O objetivo dessa pagina \u00e9 organizar todos os assuntos que j\u00e1 estudei e que ainda irei estudar.","title":"Lista de estudo"},{"location":"#topicos","text":"Ambiente de desenvolvimento com python Cria\u00e7\u00e3o Ativar ambiente virtual Instalar depend\u00eancia Salvar depend\u00eancias Instalar depend\u00eancias Desativar ambiente virtual Fila com Redis Teoria Producer Consumer Fila Exchange Ambiente de desenvolvimento Diretorio Ambiente de desenvolvimento Ativa\u00e7\u00e3o do ambiente virtual Instala\u00e7\u00e3o das depend\u00eancias Comand Requirements Containers Consumer Desenvolvendo um consumer Imports URL de conex\u00e3o Worker consumer Fun\u00e7\u00e3o para formatar dict Cria\u00e7\u00e3o de um plugin Instancia\u00e7\u00e3o do worker consumer Subir container Producer Desenvolvendo um producer Imports URL de conex\u00e3o Conex\u00e3o Declara\u00e7\u00e3o da Exchange e da Queue Fun\u00e7\u00e3o de publish Publicando uma mensagem","title":"Topicos"},{"location":"tags/","text":"Segue uma lista de tags relevantes: Ambiente Ambiente de desenvolvimento","title":"Tags"},{"location":"tags/#ambiente","text":"Ambiente de desenvolvimento","title":"Ambiente"},{"location":"ambienteDev/","tags":["Ambiente"],"text":"Cria\u00e7\u00e3o Para criar um ambiente virtual em python usamos o comando a baixo python3 -m venv .venv O ambiente virtual serve para que possamos instalar as depend\u00eancias isoladas daquelas que s\u00e3o instaladas globalmente Ativar ambiente virtual Para ativar o ambiente virtual no linux source .venv/bin/activate Instalar depend\u00eancia Com o ambiente virtual ativado podemos instalar as depend\u00eancias pip install flask Salvar depend\u00eancias Salvar as depend\u00eancias em um arquivo pip freeze > requirements.txt Instalar depend\u00eancias pip install -r requirements.txt Desativar ambiente deactivate As depend\u00eancias instaladas com ambiente desativado s\u00e3o instaladas globalmente","title":"Ambiente de desenvolvimento"},{"location":"ambienteDev/#criacao","text":"Para criar um ambiente virtual em python usamos o comando a baixo python3 -m venv .venv O ambiente virtual serve para que possamos instalar as depend\u00eancias isoladas daquelas que s\u00e3o instaladas globalmente","title":"Cria\u00e7\u00e3o"},{"location":"ambienteDev/#ativar-ambiente-virtual","text":"Para ativar o ambiente virtual no linux source .venv/bin/activate","title":"Ativar ambiente virtual"},{"location":"ambienteDev/#instalar-dependencia","text":"Com o ambiente virtual ativado podemos instalar as depend\u00eancias pip install flask","title":"Instalar depend\u00eancia"},{"location":"ambienteDev/#salvar-dependencias","text":"Salvar as depend\u00eancias em um arquivo pip freeze > requirements.txt","title":"Salvar depend\u00eancias"},{"location":"ambienteDev/#instalar-dependencias","text":"pip install -r requirements.txt","title":"Instalar depend\u00eancias"},{"location":"ambienteDev/#desativar-ambiente","text":"deactivate As depend\u00eancias instaladas com ambiente desativado s\u00e3o instaladas globalmente","title":"Desativar ambiente"},{"location":"filasRedis/ambiente/","text":"Diretorio directory \u251c\u2500\u2500 producer.py \u251c\u2500\u2500 consumer.py \u251c\u2500\u2500 docker-composer.yaml \u251c\u2500\u2500 Dockerfile \u2514\u2500\u2500 requirements.txt Ambiente de desenvolvimento Cria\u00e7\u00e3o do ambiente virtual python3 -m venv .venv Ativa\u00e7\u00e3o do ambiente virtual Ativa\u00e7\u00e3o do ambiente virtual source .venv/bin/activate Instala\u00e7\u00e3o das depend\u00eancias Comand pip install kombu redis Requirements Crie o arquivo com o conteudo abaixo. requirements.txt kombu==5.2.4 redis==4.2.2 Rode o comando pip install -r requirements.txt Containers Dockerfile RUN python:3.10 ENV PYTHONUNBUFFERED 1 WORKDIR /app COPY requirements.txt /app/requirements.txt RUN pip install -r requirements.txt COPY . /app docker-compose.yml version : '3.8' services : consumer : build : context : . dockerfile : Dockerfile command : 'python consumer.py' volumes : - .:/app depends_on : - redis redis : image : redis hostname : redis container_name : redis command : 'redis-server --requirepass mellon' ports : - 6666:6379 volumes : - .docker/redis:/data","title":"Ambiente de desenvolvimento"},{"location":"filasRedis/ambiente/#diretorio","text":"directory \u251c\u2500\u2500 producer.py \u251c\u2500\u2500 consumer.py \u251c\u2500\u2500 docker-composer.yaml \u251c\u2500\u2500 Dockerfile \u2514\u2500\u2500 requirements.txt","title":"Diretorio"},{"location":"filasRedis/ambiente/#ambiente-de-desenvolvimento","text":"Cria\u00e7\u00e3o do ambiente virtual python3 -m venv .venv","title":"Ambiente de desenvolvimento"},{"location":"filasRedis/ambiente/#ativacao-do-ambiente-virtual","text":"Ativa\u00e7\u00e3o do ambiente virtual source .venv/bin/activate","title":"Ativa\u00e7\u00e3o do ambiente virtual"},{"location":"filasRedis/ambiente/#instalacao-das-dependencias","text":"","title":"Instala\u00e7\u00e3o das depend\u00eancias"},{"location":"filasRedis/ambiente/#comand","text":"pip install kombu redis","title":"Comand"},{"location":"filasRedis/ambiente/#requirements","text":"Crie o arquivo com o conteudo abaixo. requirements.txt kombu==5.2.4 redis==4.2.2 Rode o comando pip install -r requirements.txt","title":"Requirements"},{"location":"filasRedis/ambiente/#containers","text":"Dockerfile RUN python:3.10 ENV PYTHONUNBUFFERED 1 WORKDIR /app COPY requirements.txt /app/requirements.txt RUN pip install -r requirements.txt COPY . /app docker-compose.yml version : '3.8' services : consumer : build : context : . dockerfile : Dockerfile command : 'python consumer.py' volumes : - .:/app depends_on : - redis redis : image : redis hostname : redis container_name : redis command : 'redis-server --requirepass mellon' ports : - 6666:6379 volumes : - .docker/redis:/data","title":"Containers"},{"location":"filasRedis/consumer/","text":"Desenvolvendo um consumer Imports consumer.py 1 2 3 4 5 from pprint import pformat from typing import Callable , Type from kombu import Connection , Consumer , Exchange , Queue from kombu.mixins import ConsumerMixin from kombu.message import Message URL de conex\u00e3o consumer.py 8 REDIS_URL = \"redis://:mellon@redis:6379/0\" Worker consumer consumer.py 11 12 13 14 15 16 17 18 19 20 21 22 23 class Worker ( ConsumerMixin ): def __init__ ( self , connection : Type [ Connection ], queues : Type [ Queue ]) -> None : self . connection = connection self . queues = queues self . plugins = [] def get_consumers ( self , Consumer : Type [ Consumer ], channel ) -> list : return [ Consumer ( queues = self . queues , callbacks = [ * self . plugins ]) ] def add_plugin ( self , callback : Callable ) -> None : self . plugins . append ( callback ) Fun\u00e7\u00e3o para formatar dict consumer.py 25 26 def my_format ( obj : dict ) -> str : return pformat ( obj , indent = 4 ) Cria\u00e7\u00e3o de um plugin consumer.py 28 29 30 31 32 33 def plugin ( body : dict , message : Message ) -> None : print ( f \"Message: { body } \" ) print ( f \" \\t properties: \\n\\t { my_format ( message . properties ) } \" ) print ( f \" \\t delivery_info: { my_format ( message . tdelivery_info } \") message . ack () Instancia\u00e7\u00e3o do worker consumer consumer.py 38 39 40 41 42 43 44 45 46 47 48 exchange = Exchange ( name = \"send-message\" , type = \"direct\" ) queues = [ Queue ( name = \"send-message\" , exchange = exchange , routing_key = \"x-message\" )] with Connection ( hostname = REDIS_URL , heartbeat = 4 ) as connection : try : worker = Worker ( connection = connection , queues = queues ) worker . add_plugin ( plugin ) print ( \"Start Consuming:\" ) worker . run () except Exception as err : print ( err ) Subir container Terminal docker-compose up","title":"Consumer"},{"location":"filasRedis/consumer/#desenvolvendo-um-consumer","text":"","title":"Desenvolvendo um consumer"},{"location":"filasRedis/consumer/#imports","text":"consumer.py 1 2 3 4 5 from pprint import pformat from typing import Callable , Type from kombu import Connection , Consumer , Exchange , Queue from kombu.mixins import ConsumerMixin from kombu.message import Message","title":"Imports"},{"location":"filasRedis/consumer/#url-de-conexao","text":"consumer.py 8 REDIS_URL = \"redis://:mellon@redis:6379/0\"","title":"URL de conex\u00e3o"},{"location":"filasRedis/consumer/#worker-consumer","text":"consumer.py 11 12 13 14 15 16 17 18 19 20 21 22 23 class Worker ( ConsumerMixin ): def __init__ ( self , connection : Type [ Connection ], queues : Type [ Queue ]) -> None : self . connection = connection self . queues = queues self . plugins = [] def get_consumers ( self , Consumer : Type [ Consumer ], channel ) -> list : return [ Consumer ( queues = self . queues , callbacks = [ * self . plugins ]) ] def add_plugin ( self , callback : Callable ) -> None : self . plugins . append ( callback )","title":"Worker consumer"},{"location":"filasRedis/consumer/#funcao-para-formatar-dict","text":"consumer.py 25 26 def my_format ( obj : dict ) -> str : return pformat ( obj , indent = 4 )","title":"Fun\u00e7\u00e3o para formatar dict"},{"location":"filasRedis/consumer/#criacao-de-um-plugin","text":"consumer.py 28 29 30 31 32 33 def plugin ( body : dict , message : Message ) -> None : print ( f \"Message: { body } \" ) print ( f \" \\t properties: \\n\\t { my_format ( message . properties ) } \" ) print ( f \" \\t delivery_info: { my_format ( message . tdelivery_info } \") message . ack ()","title":"Cria\u00e7\u00e3o de um plugin"},{"location":"filasRedis/consumer/#instanciacao-do-worker-consumer","text":"consumer.py 38 39 40 41 42 43 44 45 46 47 48 exchange = Exchange ( name = \"send-message\" , type = \"direct\" ) queues = [ Queue ( name = \"send-message\" , exchange = exchange , routing_key = \"x-message\" )] with Connection ( hostname = REDIS_URL , heartbeat = 4 ) as connection : try : worker = Worker ( connection = connection , queues = queues ) worker . add_plugin ( plugin ) print ( \"Start Consuming:\" ) worker . run () except Exception as err : print ( err )","title":"Instancia\u00e7\u00e3o do worker consumer"},{"location":"filasRedis/consumer/#subir-container","text":"Terminal docker-compose up","title":"Subir container"},{"location":"filasRedis/producer/","text":"Desenvolvendo um Producer Imports producer.py 1 2 from json import dumps from kombu import Connection , Producer , Exchange , Queue URL de conex\u00e3o consumer.py 4 REDIS_URL = \"redis://:mellon@localhost:6666/0\" Conex\u00e3o producer.py 6 7 8 connection = Connection ( REDIS_URL ) channel = connection . channel () Declara\u00e7\u00e3o da Exchange e da Queue producer.py 10 11 12 13 14 exchange = Exchange ( name = \"send-message\" , type = \"direct\" ) queue = Queue ( name = \"send-message\" , exchange = exchange , routing_key = \"x-message\" ) queue . maybe_bind ( channel ) queue . declare () Fun\u00e7\u00e3o de publish producer.py 17 18 19 def publish ( msg : dict , routing_key : str = \"x-message\" ) -> None : producer = Producer ( exchange = exchange , channel = channel , routing_key = \"x-message\" ) producer . publish ( body = dumps ( msg ), content_type = \"application/json\" ) Publicando uma mensagem producer.py 22 23 24 25 26 my_message = { \"msg\" : \"Hello World : )\" } publish ( my_message ) No diretorio onde esta o arquivo producer.py , com o ambiente virtual ativado, execute o comando abaixo: Terminal python producer.py","title":"Producer"},{"location":"filasRedis/producer/#desenvolvendo-um-producer","text":"","title":"Desenvolvendo um Producer"},{"location":"filasRedis/producer/#imports","text":"producer.py 1 2 from json import dumps from kombu import Connection , Producer , Exchange , Queue","title":"Imports"},{"location":"filasRedis/producer/#url-de-conexao","text":"consumer.py 4 REDIS_URL = \"redis://:mellon@localhost:6666/0\"","title":"URL de conex\u00e3o"},{"location":"filasRedis/producer/#conexao","text":"producer.py 6 7 8 connection = Connection ( REDIS_URL ) channel = connection . channel ()","title":"Conex\u00e3o"},{"location":"filasRedis/producer/#declaracao-da-exchange-e-da-queue","text":"producer.py 10 11 12 13 14 exchange = Exchange ( name = \"send-message\" , type = \"direct\" ) queue = Queue ( name = \"send-message\" , exchange = exchange , routing_key = \"x-message\" ) queue . maybe_bind ( channel ) queue . declare ()","title":"Declara\u00e7\u00e3o da Exchange e da Queue"},{"location":"filasRedis/producer/#funcao-de-publish","text":"producer.py 17 18 19 def publish ( msg : dict , routing_key : str = \"x-message\" ) -> None : producer = Producer ( exchange = exchange , channel = channel , routing_key = \"x-message\" ) producer . publish ( body = dumps ( msg ), content_type = \"application/json\" )","title":"Fun\u00e7\u00e3o de publish"},{"location":"filasRedis/producer/#publicando-uma-mensagem","text":"producer.py 22 23 24 25 26 my_message = { \"msg\" : \"Hello World : )\" } publish ( my_message ) No diretorio onde esta o arquivo producer.py , com o ambiente virtual ativado, execute o comando abaixo: Terminal python producer.py","title":"Publicando uma mensagem"},{"location":"filasRedis/teoria/","text":"Producer Producer \u00e9 o programa que envia mensagens. graph LR B((Producer)) Consumer Consumer \u00e9 um programa que recebe mensagens. graph LR B((Consumer)) Queue Queue pode ser entedida como um grande buffer de mensagens. graph LR A[[Queue]] Exemplo graph LR B((Producer)) --> A[[Queue]] A --> C((Consumer)) Exchange Exchange pode ser entendida com um mediador de roteamento. direct - a Exchange encaminha a mensagem para uma fila com base na chave de roteamento. fanout - a Exchange encaminha a mensagem para todas as filas ignorando as filas. topic - a Exchange encaminha a mensagem usando a correspondencia entre um padr\u00e3o definido na troca e as chaves de roteamento anexadas as filas graph LR A((Exchange)) Exemplo graph LR E((Producer)) --> P P((Exchange)) --> A[[Queue A]] P --> D[[Queue B]]","title":"Teoria"},{"location":"filasRedis/teoria/#producer","text":"Producer \u00e9 o programa que envia mensagens. graph LR B((Producer))","title":"Producer"},{"location":"filasRedis/teoria/#consumer","text":"Consumer \u00e9 um programa que recebe mensagens. graph LR B((Consumer))","title":"Consumer"},{"location":"filasRedis/teoria/#queue","text":"Queue pode ser entedida como um grande buffer de mensagens. graph LR A[[Queue]]","title":"Queue"},{"location":"filasRedis/teoria/#exemplo","text":"graph LR B((Producer)) --> A[[Queue]] A --> C((Consumer))","title":"Exemplo"},{"location":"filasRedis/teoria/#exchange","text":"Exchange pode ser entendida com um mediador de roteamento. direct - a Exchange encaminha a mensagem para uma fila com base na chave de roteamento. fanout - a Exchange encaminha a mensagem para todas as filas ignorando as filas. topic - a Exchange encaminha a mensagem usando a correspondencia entre um padr\u00e3o definido na troca e as chaves de roteamento anexadas as filas graph LR A((Exchange))","title":"Exchange"},{"location":"filasRedis/teoria/#exemplo_1","text":"graph LR E((Producer)) --> P P((Exchange)) --> A[[Queue A]] P --> D[[Queue B]]","title":"Exemplo"},{"location":"tags/","text":"Segue uma lista de tags relevantes: Ambiente Ambiente de desenvolvimento","title":"Tags"},{"location":"tags/#ambiente","text":"Ambiente de desenvolvimento","title":"Ambiente"}]}